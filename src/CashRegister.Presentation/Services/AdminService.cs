using CashRegister.Domain.Interfaces;

namespace CashRegister.Presentation.Services;

public class AdminService
{
  private readonly IProductRepository _productRepo;
  private readonly IReceiptRepository _receiptRepo;
  private readonly IBarcodeScannerService _scanner;
  private readonly ConsoleService _console;
  private readonly InputService _input;

  public AdminService(
      IProductRepository productRepo,
      IReceiptRepository receiptRepo,
      IBarcodeScannerService scanner,
      ConsoleService consoleService,
      InputService inputService
  )
  {
    _productRepo = productRepo;
    _receiptRepo = receiptRepo;
    _scanner = scanner;
    _console = consoleService;
    _input = inputService;
  }

  public void Run()
  {
    _console.Clear();
    _console.PrintHeader("=== –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===");

    while (true)
    {
      _console.WriteLine("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:");
      _console.WriteLine("1 - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä");
      _console.WriteLine("2 - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç");
      _console.WriteLine("3 - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ");
      _console.WriteLine("0 - –í—ã—Ö–æ–¥");
      _console.PrintSeparator();

      var choice = _input.GetChoice("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ", new List<string> { "0", "1", "2", "3" });

      switch (choice)
      {
        case "1":
          ScanProduct();
          break;
        case "2":
          GenerateReport();
          break;
        case "3":
          ExportData();
          break;
        case "0":
          _console.PrintHeader("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
          return;
      }

      if (choice != "0") // –ù–µ –∂–¥–µ–º –∫–ª–∞–≤–∏—à—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      {
        _console.WaitForAnyKey();
        _console.Clear();
      }
    }
  }

  private void ScanProduct()
  {
    _console.PrintHeader("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞");

    _console.Write("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞: ");
    var barcode = _scanner.Scan();

    var product = _productRepo.GetByBarcode(barcode.Value);

    if (product != null)
    {
      _console.WriteLine($"\n‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:");
      _console.WriteLine($"   –®—Ç—Ä–∏—Ö-–∫–æ–¥: {product.Barcode}");
      _console.WriteLine($"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product.Name}");
      _console.WriteLine($"   –¶–µ–Ω–∞: {product.Price:C}");
    }
    else
    {
      _console.WriteLine($"\n‚ùå –¢–æ–≤–∞—Ä —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º '{barcode}' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  }

  private void GenerateReport()
  {
    _console.PrintHeader("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞");

    var allProducts = _productRepo.GetAll();
    var allReceipts = _receiptRepo.GetAll();

    _console.WriteLine($"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    _console.WriteLine($"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {allProducts.Count()}");
    _console.WriteLine($"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {allReceipts.Count()}");
    _console.WriteLine($"   –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {allReceipts.Sum(r => r.TotalAmount):C}");

    _console.WriteLine("\nüì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:");
    foreach (var product in allProducts)
    {
      _console.WriteLine($"   {product.Barcode} - {product.Name} - {product.Price:C}");
    }
  }

  private void ExportData()
  {
    _console.PrintHeader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —É—á–µ—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É");

    var confirm = _input.GetConfirmation("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?");

    if (confirm)
    {
      // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
      _console.WriteLine("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —É—á–µ—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É.");
    }
    else
    {
      _console.WriteLine("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.");
    }
  }
}
