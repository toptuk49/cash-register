using CashRegister.Domain.Entities;
using CashRegister.Domain.Interfaces;

namespace CashRegister.Presentation.Services;

public class CashierService
{
  private readonly IProductRepository _productRepo;
  private readonly IReceiptRepository _receiptRepo;
  private readonly IBarcodeScannerService _scanner;
  private readonly ConsoleService _console;
  private readonly InputService _input;

  public CashierService(
      IProductRepository productRepo,
      IReceiptRepository receiptRepo,
      IBarcodeScannerService scanner,
      ConsoleService consoleService,
      InputService inputService
  )
  {
    _productRepo = productRepo;
    _receiptRepo = receiptRepo;
    _scanner = scanner;
    _console = consoleService;
    _input = inputService;
  }

  public void Run()
  {
    _console.Clear();
    _console.PrintHeader("=== –†–ï–ñ–ò–ú –ö–ê–°–°–ò–†–ê ===");

    var receipt = new Receipt();

    while (true)
    {
      DisplayCurrentReceipt(receipt);

      _console.WriteLine("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:");
      _console.WriteLine("1 - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞");
      _console.WriteLine("2 - –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫");
      _console.WriteLine("3 - –û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞");
      _console.WriteLine("4 - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö/–≤–æ–∑–≤—Ä–∞—Ç–∞—Ö");
      _console.WriteLine("0 - –í—ã—Ö–æ–¥");
      _console.PrintSeparator();

      var choice = _input.GetChoice("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ", new List<string> { "0", "1", "2", "3", "4" });

      switch (choice)
      {
        case "1":
          ScanProductAndAddToReceipt(receipt);
          break;
        case "2":
          CompleteSaleAndGenerateReceipt(receipt);
          receipt = new Receipt(); // –ù–æ–≤—ã–π —á–µ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
          break;
        case "3":
          ProcessReturn();
          break;
        case "4":
          GenerateSalesReport();
          break;
        case "0":
          if (receipt.Items.Any())
          {
            var confirm = _input.GetConfirmation("–í —á–µ–∫–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?");
            if (!confirm) continue;
          }
          _console.PrintHeader("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞—Å—Å–∏—Ä–∞");
          return;
      }

      if (choice != "0") // –ù–µ –∂–¥–µ–º –∫–ª–∞–≤–∏—à—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      {
        _console.WaitForAnyKey();
        _console.Clear();
      }
    }
  }

  private void DisplayCurrentReceipt(Receipt receipt)
  {
    _console.PrintHeader("–¢–µ–∫—É—â–∏–π —á–µ–∫");

    if (!receipt.Items.Any())
    {
      _console.WriteLine("–ß–µ–∫ –ø—É—Å—Ç");
      return;
    }

    foreach (var item in receipt.Items)
    {
      _console.WriteLine($"{item.Product.Name} - {item.Product.Price:C} x {item.Quantity} = {item.TotalPrice:C}");
    }

    _console.PrintSeparator();
    _console.WriteLine($"–ò–¢–û–ì–û: {receipt.TotalAmount:C}");
  }

  private void ScanProductAndAddToReceipt(Receipt receipt)
  {
    _console.PrintHeader("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞");

    _console.Write("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞: ");
    var barcode = _scanner.Scan();

    var product = _productRepo.GetByBarcode(barcode.Value);

    if (product == null)
    {
      _console.WriteLine($"‚ùå –¢–æ–≤–∞—Ä —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º '{barcode}' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    var existingItem = receipt.GetItemByBarcode(barcode);

    if (existingItem != null)
    {
      var addMore = _input.GetConfirmation($"–¢–æ–≤–∞—Ä '{product.Name}' —É–∂–µ –≤ —á–µ–∫–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {existingItem.Quantity}). –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ?");
      if (addMore)
      {
        var additionalQuantity = _input.GetInteger($"–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", 1, 100);
        receipt.AddProduct(product, additionalQuantity);
        _console.WriteLine($"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {additionalQuantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞: {product.Name}");
      }
    }
    else
    {
      var quantity = _input.GetInteger($"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è '{product.Name}': ", 1, 100);
      receipt.AddProduct(product, quantity);
      _console.WriteLine($"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product.Name} - {product.Price:C} x {quantity}");
    }
  }
  private void CompleteSaleAndGenerateReceipt(Receipt receipt)
  {
    _console.PrintHeader("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏");

    if (!receipt.Items.Any())
    {
      _console.WriteLine("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É: —á–µ–∫ –ø—É—Å—Ç.");
      return;
    }

    _console.WriteLine("=== –§–ò–ù–ê–õ–¨–ù–´–ô –ß–ï–ö ===");
    DisplayCurrentReceipt(receipt);

    var confirm = _input.GetConfirmation("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏?");

    if (!confirm)
    {
      _console.WriteLine("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      return;
    }

    receipt.Print();
    _receiptRepo.Add(receipt);

    _console.WriteLine("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");
    _console.WriteLine($"üí∞ –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {receipt.TotalAmount:C}");
    _console.WriteLine($"üìÑ –ù–æ–º–µ—Ä —á–µ–∫–∞: {receipt.Id}");

    _console.PrintSeparator();
    _console.WriteLine("üñ®Ô∏è –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å...");
  }

  private void ProcessReturn()
  {
    _console.PrintHeader("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞");

    var allReceipts = _receiptRepo.GetAll().ToList();

    if (!allReceipts.Any())
    {
      _console.WriteLine("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.");
      return;
    }

    _console.WriteLine("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏:");
    var recentReceipts = allReceipts.TakeLast(5).ToList();

    for (int i = 0; i < recentReceipts.Count; i++)
    {
      var r = recentReceipts[i];
      _console.WriteLine($"{i + 1}. –ß–µ–∫ #{r.Id} - {r.CreatedAt:dd.MM.yyyy HH:mm} - {r.TotalAmount:C}");
    }

    _console.WriteLine("0. –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞ –≤—Ä—É—á–Ω—É—é");
    _console.PrintSeparator();

    var choice = _input.GetChoice("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ",
        new List<string> { "0", "1", "2", "3", "4", "5" });

    Receipt? selectedReceipt = null;

    if (choice == "0")
    {
      var receiptId = _input.GetRequiredString("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞: ", "–Ω–æ–º–µ—Ä —á–µ–∫–∞");
      selectedReceipt = allReceipts.FirstOrDefault(r => r.Id.ToString() == receiptId);
    }
    else
    {
      var index = int.Parse(choice) - 1;
      selectedReceipt = recentReceipts[index];
    }

    if (selectedReceipt == null)
    {
      _console.WriteLine("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    _console.WriteLine($"\n–¢–æ–≤–∞—Ä—ã –≤ —á–µ–∫–µ #{selectedReceipt.Id}:");
    foreach (var item in selectedReceipt.Items)
    {
      _console.WriteLine($"- {item.Product.Name} ({item.Product.Barcode}) - {item.Product.Price:C} x {item.Quantity} = {item.TotalPrice:C}");
    }

    var productBarcode = _input.GetRequiredString("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ", "—à—Ç—Ä–∏—Ö-–∫–æ–¥");
    var returnItem = selectedReceipt.GetItemByBarcode(productBarcode);

    if (returnItem == null)
    {
      _console.WriteLine("‚ùå –¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ.");
      return;
    }

    var returnQuantity = _input.GetInteger($"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º {returnItem.Quantity}): ", 1, returnItem.Quantity);

    var confirm = _input.GetConfirmation($"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç {returnQuantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ '{returnItem.Product.Name}' –Ω–∞ —Å—É–º–º—É {returnItem.Product.Price * returnQuantity:C}?");

    if (confirm)
    {
      var returnReceipt = new Receipt(isReturn: true);
      returnReceipt.AddProduct(returnItem.Product, returnQuantity);

      _receiptRepo.Add(returnReceipt);

      _console.WriteLine("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
      _console.WriteLine($"üí∞ –°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: {returnReceipt.TotalAmount:C}");
      _console.WriteLine($"üìÑ –ù–æ–º–µ—Ä —á–µ–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {returnReceipt.Id}");

      returnReceipt.Print();
    }
    else
    {
      _console.WriteLine("‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω.");
    }
  }

  private void GenerateSalesReport()
  {
    _console.PrintHeader("–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö/–≤–æ–∑–≤—Ä–∞—Ç–∞—Ö");

    var allReceipts = _receiptRepo.GetAll().ToList();
    var sales = allReceipts.Where(r => !r.IsReturn).ToList();
    var returns = allReceipts.Where(r => r.IsReturn).ToList();

    _console.WriteLine("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    _console.WriteLine($"   –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {sales.Count}");
    _console.WriteLine($"   –í—Å–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: {returns.Count}");
    _console.WriteLine($"   –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {sales.Sum(r => r.TotalAmount):C}");
    _console.WriteLine($"   –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: {returns.Sum(r => r.TotalAmount):C}");
    _console.WriteLine($"   –ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞: {sales.Sum(r => r.TotalAmount) - returns.Sum(r => r.TotalAmount):C}");

    _console.WriteLine("\nüì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:");

    var allSaleItems = sales.SelectMany(r => r.Items).ToList();
    var productSales = allSaleItems
        .GroupBy(i => i.Product.Barcode)
        .Select(g => new
        {
          Product = g.First().Product,
          TotalSold = g.Sum(i => i.Quantity),
          TotalRevenue = g.Sum(i => i.TotalPrice)
        })
        .OrderByDescending(p => p.TotalRevenue);

    foreach (var productStat in productSales)
    {
      _console.WriteLine($"   {productStat.Product.Name}:");
      _console.WriteLine($"     –ü—Ä–æ–¥–∞–Ω–æ: {productStat.TotalSold} —à—Ç.");
      _console.WriteLine($"     –í—ã—Ä—É—á–∫–∞: {productStat.TotalRevenue:C}");
    }

    _console.WriteLine("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:");
    var recentOperations = allReceipts
        .OrderByDescending(r => r.CreatedAt)
        .Take(5)
        .ToList();

    foreach (var op in recentOperations)
    {
      var type = op.IsReturn ? "–í–û–ó–í–†–ê–¢" : "–ü–†–û–î–ê–ñ–ê";
      _console.WriteLine($"   {op.CreatedAt:dd.MM.yyyy HH:mm} - {type} - {op.TotalAmount:C}");
    }
  }
}
